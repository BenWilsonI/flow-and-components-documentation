---
title: Theming Polymer Components
order: 4
layout: page
---
= Theming Polymer Components

This section describes how to theme applications that include, or are built with, <<../polymer-templates/tutorial-template-basic#,
Polymer components>>.  

When styling Polymer components, it is important to distinguish global and scoped styles:  

* *Global styles*: Apply to all elements globally. A CSS selector targets any and all elements. This was the case generally before the introduction of Web Components. 
* *Scoped styles*: Are isolated from global styles and apply to only the shadow DOM of a specific Web Component (Polymer component). 

== Applying Global Styles

Global styles are styles defined in the document scope, that is styles that target the document body and regular DOM contents. Global styles exclude styles that target shadow DOM content, for example the internals of a Vaadin Polymer component or other Web Component. 

To define global styles, you should use the `<custom-style><style>...</style><custom-style>` tag in an HTML file.

[NOTE]
The `<custom-style>` wrapper for global styles is required by Polymer 2 to enable correct cross-browser compatibility.

*Example*: Using the `<custom-style>` tag in an HTML file. 

[source,html]
----
<custom-style>
  <style>
    /* Example global style */
    html {
      font-size: 1em;
    }
  </style>
</custom-style>
----

This file should be <<../importing-dependencies/tutorial-importing#,imported>> to the <<../routing/tutorial-routing-annotation#,root layout level>> of your application. 

[NOTE]
Remember to import `<custom-style>` from `bower_components/polymer/lib/elements/custom-style.html`. Although the `<style>` element in the `<custom-style>` tag is always processed by the browser, its scope only works in polyfilled browsers if you import `<custom-style>`. `<custom-style>` is always loaded when a Vaadin component is imported.

== Applying Scoped Styles

Since Polymer components are Web Components, their content is in the shadow DOM. By design, the shadow DOM defines a local-style scope that is isolated from global styles.

You can add component-specific scoped styles directly in the `<style>` tag in the HTML Polymer component template.

*Example*: Adding scoped styles to the `my-view.html` Polymer template. 

[source,html]
----
<link rel="import" href="../bower_components/polymer/polymer-element.html">

<dom-module id="my-view">
  <template>
    <style>
      /* Example scoped styles, applied to <my-view> template contents only */

      :host {
        /* Styles for the `<my-view>` hosting element */
        display: block;
      }

      .my-view-title {
        font-weight: bold;
        border-bottom: 1px solid gray;
      }
    </style>

    <div class="my-view-title">My view title</div>
  </template>
</dom-module>
<script>
  class MyView extends Polymer.Element {
    static get is() { return 'my-view'; }
  }

  customElements.define(MyView.is, MyView);
</script>
----

== Using Custom CSS Properties

You can use custom CSS properties to share common style values, such as sizes and colors, among different parts of your application. 

Custom properties use the double dash (`--`) syntax, for example `--main-color: black;`, and allow you to assign and reference CSS variables. 

Custom CSS property values are inherited and are able to penetrate the shadow DOM. You can use them to style component elements within the shadow DOM. Polymer templates can reuse custom CSS property values defined by global styles, and also override them.

*Example*: Defining a global custom CSS property in a Polymer template. 

[source,html]
----
<custom-style>
  <style>
    html {
      /* Example global custom CSS property definition */
      --my-theme-color: brown;
    }
  </style>
</custom-style>
----

You can access custom properties using the `var()` function, for example `color: var(--main-color);`.

*Example*: Using the `var()` function in the `my-view.html` Polymer template.

[source,html]
----
<!-- ... -->

<dom-module id="my-view">
  <template>
    <style>
      /* ... */

      .my-view-title {
        /* Example referencing custom CSS property */
        color: var(--my-theme-color);
      }
    </style>
  </template>

  <!-- ... -->
</dom-module>
----

== Using Style Modules

Style modules allow you to use the same style sheet for multiple Polymer templates and global styles.

Style modules must be created in HTML and use the `<dom-module id="_name_"><template><style>/* ... */</style></template></dom-module>` tag combination.

*Example*: Defining the `shared-styles` style module. 

[source,html]
----
<dom-module id="shared-styles">
  <template>
    <style>
      /* Example style module */
      .my-outline-style {
        outline: 1px solid green;
      }
    </style>
  </template>
</dom-module>
----

To include a style module in a Polymer template, import the style module file and then use `<style include="_style module id_">`:

*Example*: Using the `shared-styles` style module in the `my-view.html` Polymer template. 
[source,html]
----
<!-- ... -->
<link rel="import" href="../styles/shared-styles.html">

<dom-module id="my-view">
  <template>
    <style include="shared-styles">
      /*  */
    </style>
  </template>

  <!-- ... -->
</dom-module>
----

* You can use multiple style modules in a Polymer template by separating the modules names with a white space, for example `<style include="shared-styles-1 shared-styles-2"></style>```.

Style modules can also be included in <<../importing-dependencies/tutorial-include-css#using-global-styles,global styles>>. 

*Example*: Including the `shared-styles` style module in `global-styles.html`. 

[source,html]
----
<link rel="import" href="./shared-styles.html">

<custom-style>
  <style include="shared-styles"></style>
</custom-style>
----
