---
title: Theming Overlay Components
order: 6
layout: page
---

= Theming Overlay Components

`<vaadin-overlay>` is a Web Component that allows you to create an overlay. It is an essential part of many components, for example, `dialog`, `notification`, `combo-box`, `date-picker`, `time-picker`, `select` and `context-menu`. These component components are made up of two components:

* *Main* component, for example `<vaadin-dialog>`, that is not visible (`display:none`) on the page.
* *Overlay* component, for example `<vaadin-dialog-overlay>`, that is visible on the page.

== Styling an Overlay

The `<vaadin-overlay>` component contains three stylable parts:

* *Backdrop*: The optional modality curtain that covers the whole viewport.
* *Overlay*: The container in which you position, size and align the content. It is typically also a scrolling container.
* *Content*: The content area inside the scrolling container (overlay). You can apply padding in this part to affect the size of the scrolled content. 

The `theme` attribute is the only attribute that is copied from the main component to the overlay component. This allows you to style individual overlays. This is only exception and all other attributes (for example the class selector) are not copied from the main component to the overlay component. 

As with all Polymer components, it is necessary to create a <<theming-crash-course#using+style+modules,style module>> to style an overlay component. You should include styles, optionally scoped with a <<using-component-themes#using-theme-variants,theme variant>> selector, that target all stylable parts.

*Example*: Generic `theme-for="vaadin-*-overlay` style module.

[source,html]
----
<dom-module id="..."theme-for="vaadin-*-overlay">
    <template>
        <style>
            :host([theme~="custom-theme-variant"]) [part~="overlay"] {
                ...
            }
        </style>
    </template>
</dom-module>
----

*Example*: `my-vaadin-dialog-theme` style module for `vaadin-dialog-overlay`.

[source,html]
----
<dom-module id="my-vaadin-dialog-theme" theme-for="vaadin-dialog-overlay">
    <template>
        <style>

            [part="backdrop"] {
                ...
            }

            [part="overlay"] {
                ...
            }

            [part="content"] {
                ...
            }

        </style>
    </template>
</dom-module>
----

[NOTE]
`ThemableMixin` does not guarantee the order in which the style modules are applied.
It is important to declare CSS rules whose specificity is greater than the Lumo properties that are being overridden. See <<application-theming-basics#polymer-component-styling-issues,Polymer Component Styling Issues>> for more. 
