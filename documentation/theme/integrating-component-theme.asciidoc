---
title: Creating a Custom Theme
order: 5
layout: page
---

= Creating a Custom Theme

You can create your own custom theme. 

At a minimum, a theme is consists of a:

* <<Creating a Theme Class,Theme class>>.
* Theme definition.
* Collection of <<theming-crash-course#Using-style-modules,style modules>>.

== Creating a Theme Class

The theme class tells Vaadin Flow how to transform the base un-themed component HTML into the themed version. 

=== Setting Required Elements and Properties

Your theme class should:

* Import all style modules using the `@HtmlImport` annotation. 

+
*Example*: Import section of the `Lumo` theme class.
+
[source,java]
----
@HtmlImport("frontend://bower_components/vaadin-lumo-styles/color.html")
@HtmlImport("frontend://bower_components/vaadin-lumo-styles/typography.html")
@HtmlImport("frontend://bower_components/vaadin-lumo-styles/sizing.html")
@HtmlImport("frontend://bower_components/vaadin-lumo-styles/spacing.html")
@HtmlImport("frontend://bower_components/vaadin-lumo-styles/style.html")
@HtmlImport("frontend://bower_components/vaadin-lumo-styles/icons.html")
----
** Each HTML import is added to the `<head>` element of the bootstrap page.

* Implement `AbstractTheme`.

* Define the URL of the base component and the URL for the themed components

+
*Example*: Implementing `AbstractTheme` and using the `getBaseUrl` and `getThemeUrl` methods.
+
[source,java]
----
@HtmlImport("frontend://bower_components/vaadin-lumo-styles/color.html")
public class MyTheme implements AbstractTheme {
    @Override
    public String getBaseUrl() {
        return "/src/";
    }

    @Override
    public String getThemeUrl() {
        return "/theme/myTheme/";
    }
}
----

** The `getBaseUrl` method returns the URL for the base component implementation. It is typically `/src/`. This should return the part of the `HtmlImport` that can be used to determine if it is an import that can be changed to a theme import. 

** The `getThemeUrl` method returns the URL for the component's themed version implementation. 

=== Setting Optional Elements and Properties

In your theme class, you can also optionally define:

* *Inline header content*: Use the `getHeaderInlineContents` method to return a list of content to inline to `<head>` element the initial bootstrap page. This content is handled as "no-wrap as is". This method is usually used to include `<custom-style>` declarations that are imported using the `HtmlImport` annotation. See <<../importing-dependencies/tutorial-include-css#using-global-styles,Using Global Styles>> for more.

+
*Example*: Using the `getHeaderInlineContents` method to include custom styles. 
+
[source,java]
----
@Override
public List<String> getHeaderInlineContents() {
    return Collections.singletonList("<custom-style>\n"
            + "    <style include=\"lumo-color lumo-typography\"></style>\n"
            + "</custom-style>");
}
----

* *Body attributes*: Use the `getBodyAttributes` method to get attributes to be inserted into the `<body>` element of the initial page. This is usually used for <<Using Variants,variants>> (see below).


* *Translate URL*: Use the `translateUrl (String url)` method to define the translate URL. The method uses the result of the  `getThemeUrl` method. If translation is possible the translated URL is returned. 

== Using Variants

Your theme can support variants. The Lumo theme, for example, supports light and dark variants. 

To add support for variants, you can override the `getBodyAttributes`  method.

*Example*: Setting the `theme` attribute to the `dark` variant. 
[source,java]
----
@Override
public Map<String, String> getBodyAttributes(String variant) {
  if ("dark".equals(variant)) {
    // the <body> element will have the "theme" attribute set to
    // "dark" when the dark variant is used
    return Collections.singletonMap("theme", "dark");
  }
  return Collections.emptyMap();
}
----

You also need to create themed HTML files for the variant. See, https://github.com/vaadin/vaadin-button/blob/master/theme/lumo/vaadin-button.html[Themed Vaadin Button], for example. 

[NOTE]
Themed HTML files should be stored in
`${frontend.working.directory}/bower_components/{component}/theme/myTheme`. By default, for `vaadin-button`  this would be `src/main/webapp/frontend/bower_components/vaadin-button/theme/myTheme/vaadin-button.html`


[NOTE]
If an exception navigation chain does not get the used `Theme`, the exception navigation target can be annotated with `@NoTheme` so that a warning is not logged.

== Creating Custom Themes for Polymer Components 

Individaul Polymer components are themed using `Vaadin.ThemableMixin`. See https://github.com/vaadin/vaadin-themable-mixin/wiki[vaadin-themable-mixin documentation] for comprehensive documentation on how to theme these components. 
