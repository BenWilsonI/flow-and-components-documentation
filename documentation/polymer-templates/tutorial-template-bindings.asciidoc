---
title: Binding Model Data in a PolymerTemplate
order: 6
layout: page
subnav:
  - title: Two-way data binding
    href: '#two-way-binding'
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Binding Model Data in a PolymerTemplate

`PolymerTemplate` allows you to bind model values to different parts of the element tree defined by the template.

In the HTML code, text surrounded by double curly brackets `{{ }}` or double square brackets `[[ ]]` identify that host data is bound:

* Double square brackets signifies one-way data binding, i.e. only downward data flow.
* Double-curly brackets signifies <<Two-way Data Binding,two-way data binding>>, i.e. upward and downward data flow. 

== One-way Data Binding 

The examples in this section assume the following server classes.

* Template class. 
+
[source,java]
----
@Tag("my-template")
@HtmlImport("/com/example/PolymerBinding.html")
public class PolymerBindingTemplate extends PolymerTemplate<BindingModel> {

    public PolymerBindingTemplate() {
        getModel().setHostProperty("Bound property");
    }
}
----

* Model class. 
+
[source,java]
----
public interface BindingModel extends TemplateModel {
    void setHostProperty(String propertyValue);
    String getHostProperty();
}
----

=== Binding Text Content

You can use the value of a model property as the text content of an element using `[[_propertyName_]]` inside a tag.

*Example*: Using the `hostProperty` model property as text content in a Polymer template.

[source,html]
----
<dom-module id="my-template">
    <template>
        <div>[[hostProperty]]</div>
    </template>
    <script>
         class MyTemplate extends Polymer.Element {
           static get is() {return 'my-template'}
         }
         customElements.define(MyTemplate.is, MyTemplate);
    </script>
</dom-module>
----

=== Binding Property Values

You can set an element property value based on a model using the property name (in hyphenated format) in attribute form.  

*Example*: Using the `my-property' attribute name to set the value of a property.

[source,html]
----
<dom-module id="my-template">
<template>
    <my-element my-property="[[hostProperty]]"></my-element>
</template>
...
</dom-module>
----
** This binds to the target property, `myProperty`, on `<my-element>`. 
** To be valid, the element property, `my-property`, must be hyphenated. 

Note the syntax distinction between properties and attributes:

* `name="\[[binding]]"` defines that the element *property* named `name` should get it's value from the model property named `binding`.
* `name="binding"` defines that the element *attribute* named `name` should have the value `binding`, regardless of any value in the model.

There are a few common native element *properties* that Polymer 2 cannot data bind to directly, because the binding causes issues on some browsers. For these, you need to use attribute bindings instead. See https://www.polymer-project.org/2.0/docs/devguide/data-binding#native-binding[Native properties that don't support property binding] in the Polymer 2 documentation for more. 

=== Binding Attribute Values

You can explicitly bind to an attribute (instead of a property) using the attribute name followed by the dollar sign (`$`). The attribute is often only used to set the initial value, whereas a property can typically change on the fly.

*Example* Using `$` to explicitly bind to the `something` attribute. 

[source,html]
----
<dom-module id="my-template">
    <template>
        <div something$="[[hostProperty]]"></div>
    </template>
    ...
</dom-module>
----

*Example* Using `$` to explicitly bind to the `href` attribute. 

[source,html]
----
<dom-module id="my-template">
    <template>
        <a href$="[[hostProperty]]"></a>
    </template>
    ...
</dom-module>
----

[[two-way-binding]]

== Two-way Data Binding

With two-way data binding, data flows in both directions: client-to-server and server-to-client.

In this section, we demonstrate two-way data binding by creating a Polymer component with various input fields.  

This is the template representation in the browser.

image:images/two-way-binding-example.png[Template representation]

. Create the `TwoWayBindingModel` template model class with three fields: `'name`, `accepted` and `size`.
+
[source,java]
----
public interface TwoWayBindingModel extends TemplateModel {
    void setName(String name);
    String getName();

    void setAccepted(Boolean accepted);
    Boolean getAccepted();

    void setSize(String size);
    String getSize();
}
----

. Create the `PolymerTwoWayBindingTemplate` template class, set default values for the model values, and wire listeners for `save` and `reset` events. 

+
[source,java]
----
@Tag("two-way-template")
@HtmlImport("/com/example/PolymerTwoWayBinding.html")
public class PolymerTwoWayBindingTemplate
        extends PolymerTemplate<TwoWayBindingModel> {

    public PolymerTwoWayBindingTemplate() {
        reset();
        getElement().addPropertyChangeListener("name", event -> System.out
                .println("Name is set to: " + getModel().getName()));
        getElement().addPropertyChangeListener("accepted",
                event -> System.out.println("isAccepted is set to: "
                        + getModel().getAccepted()));
        getElement().addPropertyChangeListener("size", event -> System.out
                .println("Size is set to: " + getModel().getSize()));
    }

    @EventHandler
    private void reset() {
        getModel().setName("John");
        getModel().setAccepted(false);
        getModel().setSize("medium");
    }
}
----

* The `Element::addPropertyChangeListener` method gets immediate updates for the property values. Another way to do this, is to define an `@EventHandler` method (similar to the `reset()` method) on the server side that is called when a button is clicked .

. On the client, create the `PolymerTwoWayBinding` template. 

+
[source,html]
----
<!-- Import Polymer and Polymer components -->
<link rel="import" href="/bower_components/polymer/polymer-element.html">
<link href="/bower_components/paper-input/paper-input.html" rel="import">
<link href="/bower_components/paper-radio-button/paper-radio-button.html" rel="import">
<link href="/bower_components/paper-radio-group/paper-radio-group.html" rel="import">
<link href="/bower_components/paper-checkbox/paper-checkbox.html" rel="import">

<dom-module id="two-way-template">
    <template>
        <table>
            <tr>
                <td>Paper name:</td>
                <td>
                    <paper-input value="{{name}}"></paper-input>
                </td>
            </tr>
            <tr>
                <td>Input name:</td>
                <td>
                    <input value="{{name::input}}">
                </td>
            </tr>
            <tr>
                <td>Change name:</td>
                <td>
                    <input value="{{name::change}}">
                </td>
            </tr>
            <tr>
                <td>Input accepted:</td>
                <td>
                    <input type="checkbox" checked="{{accepted::change}}">
                </td>
            </tr>
            <tr>
                <td>Polymer accepted:</td>
                <td>
                    <paper-checkbox checked="{{accepted}}"></paper-checkbox>
                </td>
            </tr>
            <tr>
                <td>Size:</td>
                <td>
                    <paper-radio-group selected="{{size}}">
                        <paper-radio-button name="small">Small</paper-radio-button>
                        <paper-radio-button name="medium">Medium</paper-radio-button>
                        <paper-radio-button name="large">Large</paper-radio-button>
                    </paper-radio-group>
                </td>
            </tr>
            <tr>
                <td>Size:</td>
                <td>
                    <select value="{{size::change}}">
                        <option value="small">Small</option>
                        <option value="medium">Medium</option>
                        <option value="large">Large</option>
                    </select>
                </td>
            </tr>
        </table>
        <div>
            <button on-click="reset">Reset values</button>
        </div>
        <slot></slot>
    </template>

    <script>
        class TwoWayBinding extends Polymer.Element {
            static get is() {
                return 'two-way-template'
            }
        }
        customElements.define(TwoWayBinding.is, TwoWayBinding);
    </script>
</dom-module>
----
* Four native input Web Components are imported:  
** `paper-input` for the `name` input string. 
** `paper-check-box` for the `accepted` checkbox.
** `paper-radio-group` and `paper-radio-button` for the `size` select element. 
* Native elements must specify a custom change event name in the annotation using the syntax: `_target-prop_="{{_hostProp::target-change-event_}}"` See https://www.polymer-project.org/2.0/docs/devguide/data-binding#two-way-native[Two-way binding to a non-Polymer element] in the Polymer 2 documentation for more. 
* We use two-way bindings for each element and some elements bind to the same property. The result is that if the value for `name` changes in the `paper-input` element, the value reflects in both `Input name:` and `Change name`, for example. 
* The `Input name:` (binds using `{{name::input}}`) and `Change name:` (binds using `{{name::change}}`) bindings work slightly differently:
** The given `target-change-event` lets Polymer know which event to listen to for change notifications.
** The functional difference is that `::input` updates while typing and `::change` updates when the value for the field changes (for example when the Enter key is used, or an `onBlur` event occurs).


See the following related resources for more: 

* <<tutorial-template-components-in-slot#,Using the <slot> Element in Polymer Templates>>.

* <<tutorial-template-basic#,Creating a Simple Component Using the PolymerTemplate API>>.
