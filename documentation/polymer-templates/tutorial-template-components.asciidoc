---
title: Adding Child Components to a PolymerTemplate Using the @Id Annotation
order: 2
layout: page
---

= Adding Child Components to a PolymerTemplate Using the @Id Annotation

You can add child components to Polymer templates using the `Component` or `Element` API.

The `@Id` annotation allows you to add a server-side `Component` or `Element` to a client-side element defined in a Polymer template.

[NOTE]
Items added to a Polymer template only display if you add them to the `ShadowRoot` of the template, or if you use a `<slot>`. See <<tutorial-template-components-in-slot#,Using <slot> in Polymer Templates for more>> 

*Example*: Creating the `MainPage.html` Polymer template with a placeholder `div` element for the `"content"` identifier.

[source,html]
----
<dom-module id="main-page">
    <template>
        <div id="header">Main page</div>
        <div id="content"></div>
        <hr>
        <div id="footer">
            <a href="mailto:someone@example.com?Subject=Hello%20again" target="_top">Send Mail</a>
        </div>
    </template>

    <script>
        class MainPage extends Polymer.Element {
            static get is() {
                return 'main-page'
            }
        }
        customElements.define(MainPage.is, MainPage);
    </script>
</dom-module>
----

*Example*: Mapping a `Div` component to the `"content"` identifier of the Polymer template using the `@id` annotation, and implementing methods to add and remove content.  

[source,java]
----
@Tag("main-page")
@HtmlImport("/com/example/MainPage.html")
public class MainPage extends PolymerTemplate<TemplateModel> {

    @Id("content")
    private Div content;

    public void setContent(Component content) {
        this.content.removeAll();
        this.content.add(content);
    }
}
----

* The `@Id` annotation attribute (`"content"`) must match the `div` element identifier.
* The `Component` or `Element` must have the same `@Tag` attribute as the Polymer element `id` (`"main-page"`). This means you cannot wire a `<span id="content"></span>` to a `@Id("content") Div content`.

A component instance of the declared type is created automatically and wired to the actual DOM element. The instance is then injected into the 'container' field. 

You can now set any `Component` as `content` for the `MainPage` class.

*Example*: Setting a `Label` as `content` in the `MainPage` class. 
[source,java]
----
MainPage page = new MainPage();
page.setContent(new Label("Hello!"));
----

[NOTE]
The declared type used in an `@Id` injection declaration must have a default constructor that is capable of instantiating it.

[TIP]
You can use the `@Id` annotation to inject an `Element` instance (instead of a `Component` instance), if you want to use a lower-level API, or if no appropriate HTML component is available.

== Using Server-side Methods in Polymer Components

Neither the hierarchical structure, nor the attributes or properties, of the Polymer template are available on the server side via the API. Getter methods only return values that are set on the server side. For this reason, server-side `Component` and `Element` read methods are not always in sync with the client side.

*Examples*:

* If you map the `"footer"` identifier of the `div` element in the Polymer template, using the `Div` component and `@Id("footer")` annotation, the injected `Div` instance will have no server-side child, even though there is an `a` anchor element available on the client side. In the injected `Div` instance, the `getChildren()` method returns an empty `Stream`. 
* Similarly, if you map the `"header"` identifier of the `div` element, using the `Div` component and `@Id("header")`, the `getText()` method returns an empty string. 

You can, however, still safely use mutation API methods, like `appendChild`, `setProperty` and `setAttribute`, from the server side. 

[NOTE]
You can detect whether a component is part of a `Template` using the `isTemplateMapped` method. See <<tutorial-component-integration#,Checking for Component Mappings in PolymerTemplates>> for more.

== Removing Items Mapped to Polymer Templates

A `Component` or `Element` that is virtually mapped to a Polymer template is connected to the `ShadowRoot` of the Polymer element. Virtually mapped items cannot be removed from the DOM by removing them on the server side. 
