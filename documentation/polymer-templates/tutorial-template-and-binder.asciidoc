---
title: Binding Data in a PolymerTemplate
order: 11
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Binding Data in a PolymerTemplate

You can use the `Binder` class to bind form data in a PolymerTemplate, in much the same way as with declared components. See <<../binding-data/tutorial-flow-components-binder#,Binding Data to Forms>> for more.

To demonstrate, we build a the `user-form` Polymer component and connect it to beans configured in a matching `UserForm` template class.  

. Create a Polymer component template, `user-form.html`, with four text input field and a submit button. 
+
[source,html]
----
<dom-module id="user-form">
    <template>
        <style>

        </style>
        <vaadin-form-layout id="form">
            <vaadin-text-field id="email" label="Email (login)" colspan="2"></vaadin-text-field>
            <vaadin-text-field id="first-name" label="First Name"></vaadin-text-field>
            <vaadin-text-field id="last-name" label="Last Name"></vaadin-text-field>
            <vaadin-text-area id="comments" label="Comments"></vaadin-text-area>
        </vaadin-form-layout>
        <form-buttons-bar id="action-buttons"></form-buttons-bar>
    </template>

</dom-module>
----

. Create a corresponding server template class, `UserForm`, that imports the Polymer template and maps correponding components using the `@Id` annotation. 
+
[source,java]
----
@Tag("user-form")
@HtmlImport("src/user-form.html")
public class UserForm extends PolymerTemplate < UserForm.FormComponentModel > {

  @Id("email")
  private TextField email;

  @Id("first-name")
  private TextField firstName;

  @Id("last-name")
  private TextField lastName;

  @Id("comments")
  private TextArea comment;

  @Id("action-buttons")
  private FormButtonsBar actionButtons;
----

. Declare a `Binder` as a class variable. 
+
[source,java]
----
private Binder<User> binder;
----

. Create an `initBinder` method that initializes the binder and links it to the form fields. 
+
[source,java]
----
private void initBinder() {
    binder = new Binder<>();

    // email
    binder.forField(email).withValidator(
            new EmailValidator("This doesn't look like a valid email address")
    ).bind(User::getEmail, User::setEmail);

    // firstName
    binder.forField(firstName).withValidator(firstName -> firstName.length() > 1,
            "The first name must contains at least 2 characters").asRequired()
            .bind(User::getFirstName, User::setFirstName);

    // lastName
    binder.forField(lastName).asRequired("Last name can't be empty")
            .bind(User::getLastName, User::setLastName);

    // comment
    binder.forField(comment).bind(User::getComment, User::setComment);
}
----

. Call the `initBinder` method inside the constructor of the class.
+
[source,java]
----
public UserForm() {
    initBinder();
}
----

. Declare methods that allow setting and getting a user object in the form.
+
[source,java]
----
/**
 * Connects the bean to the binder.
 *
 * @param user bean
 */
public void setBean(User user) {
    binder.setBean(user);
}

/**
 * Clears the form and disconnnect any bean.
 */
public void removeBean() {
    binder.removeBean();
}

/**
 * Gets the binder of the UserForm
 *
 * @return binder it binds the fields of an object to the fields shown
 */
public Optional<User> getBean() {
    return Optional.of(binder.getBean());
}
----

You can now use the `UserForm` component in other parts of your code.

[NOTE]
Unbuffered binding is used. An unbuffered binder keeps a reference to the bean: every time the user changes a value,
that value is immediately validated and written to the bean object. With buffered binding, changes are only written to the bean when this is explicitly coded. 
