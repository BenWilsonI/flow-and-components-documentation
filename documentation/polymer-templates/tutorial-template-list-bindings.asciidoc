---
title: Binding List-based Content in a PolymerTemplate
order: 7
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]
= Binding List-based Content in a PolymerTemplate

You can generate elements based on a list of items in a Polymer template using the template repeater (`<dom repeat>`).

*Example*: Using the `<dom repeat>` element to generate multiple items. 

[source,html]
----
<dom-module id="employees-list">
    <template>
        <table>
            <tr on-click="processElement">
                <th>Name</th><th>Title</th><th>Email</th>
            </tr>
            <dom-repeat items="[[employees]]">
                <template>
                    <tr on-click="handleClick" id="[[item.name]]">
                        <td>{{item.name}}</td>
                        <td>{{item.title}}</td>
                        <td>{{item.email}}</td>
                    </tr>
                </template>
            </dom-repeat>
        </table>
    </template>
    <script>
        class EmployeesList extends Polymer.Element {
            static get is() {return 'employees-list'}
        }
        customElements.define(EmployeesList.is, EmployeesList);
    </script>
</dom-module>
----
* The `<dom-repeat>` element marks the content that is generated for each item in a list. 
* In this example, a table row and everything inside the row element (`<tr>...</tr>`) is created for each item in the list.
* The value of the `items` attribute declares which items to loop. The `item` property is set on the binding scope of each instance, resulting in subproperty bindings.

The template representation in the browser is similar to:

[options="header"]
|==========================
|Name   |Title     |Email
|John D |Developer | jd@foo.bar
|Jane D |Designer  | janed@foo.bar
|Mike D |Architect | mikey@foo.bar
|==========================

See https://www.polymer-project.org/2.0/docs/api/elements/Polymer.DomRepeat[Element <dom-repeat>] in the Polymer 2 documentation for more. 

== Populating Lists of Items

To set the list of beans to display in the Polymer component, you need to declare a method in your template model. The name of the method should match the name in the `<dom-repeat>` definition. For example, data for `\[[employees]]` is set by the `setEmployees` method.

*Example*: Declaring the `setEmployees` method in the template model. 

[source,java]
----
public class EmployeesTable extends PolymerTemplate<EmployeesModel> {
  public interface EmployeesModel extends TemplateModel {
      @Include({ "name", "title", "email" })
      void setEmployees(List<Employee> employees);

      List<Employee> getEmployees();
  }

  public void setEmployees(List<Employee> employees) {
      getModel().setEmployees(employees);
  }

  public List<Employee> getEmployees() {
      return getModel().getEmployees();
  }
}
----
* The `@Include` annotation limits the properties imported into the model. The listed attributes are included, and the `id` property that has an unsupported type (see below), is excluded. In this case, you could use the `@Exclude("id")` annotation as an alternative. 

The `Employee` bean must have getters that correspond with the properties used in the `<dom-repeat>` definition in the template, for example `getName()` for `employee.name`.

*Example*: Defining getters that correspond with the template `<dom-repeat>` definition.

[source,java]
----
public class Employee {
    private String name;
    private String title;
    private String email;
    private long id;

    public Employee(String name, String title, String email, long id) {
        this.name = name;
        this.title = title;
        this.email = email;
    }

    public String getName() {
        return name;
    }

    public String getTitle() {
        return title;
    }

    public String getEmail() {
        return email;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }
}
----
* Setters are not required. The template engine only uses getters to fetch values from employee beans.

The list property updates are propagated only from the server side to the client side. Two-way data binding doesn't work with the list property. This means that client-side changes in the list property are not sent to the server.

*Example*: Client-side updates to the `messages` property are not sent to server when the `addItem` method  is called.

[source,javascript]
----
class MyTemplate extends Polymer.Element {
    static get properties() {
        return {
            messages: {
                type: Array,
                value: [],
                notify: true
            }
        };
    }
    addItem() {
        this.push('messages', 'foo');
    }
}
----

== Updating Template Model Items

Beans added to the template model using the `setEmployees()` method, populate the model only. This means that updates to the beans do not update the model.

To update the model items, you need to use the `getEmployees()` method. This method returns bean proxies connected to the model, and changes made to proxy instances are reflected in the model.

*Example*: Using the `getEmployees()` method to update the employee `title`.

[source,java]
----
public void updateTitle() {
    getEmployees().forEach(employee -> employee.setTitle("Mr."));
}
----

[NOTE]
You can also use the `setEmployees()` method with a new list of updated beans to repopulate the model, but this is not convenient if you only want to update a single item or a single property.

== Accessing Item Indices

You can access the current item index using the `@RepeatIndex` annotation. 

*Example*: Using the `@RepeatIndex` annotation in an event handler to access the current item index.

[source,java]
----
@EventHandler
public void processElement(@RepeatIndex int itemIndex) {
    System.out.println(getEmployees().get(itemIndex).getName());
}
----
* The parameter type should be either `int` or `Integer`.

See <<tutorial-template-event-handlers#,Handling User Events in a PolymerTemplate>> for more. 
