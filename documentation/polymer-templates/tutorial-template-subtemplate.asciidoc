---
title: Using the @Uses Annotation to include Child Templates in a PolymerTemplate 
order: 3
layout: page
---

= Using the @Uses Annotation to include Child Templates in a PolymerTemplate 

You can configure Java instances to be created for custom elements in your Polymer template, and include them using the `@Uses` annotation.

[NOTE]
Server-side instances are also created when you use the `@Id` annotation to connect elements. You don't need `@Uses` for elements that are already connected by `@Id`, and _vice versa_. See <<tutorial-template-components#,Adding Child Components to a PolymerTemplate Using the @Id Annotation>> for how to use the `@Id` annotation. 

The following examples demonstrate how to include a child template using the `@Uses` annotation, and include parent and child Polymer templates and matching parent and child server classes. 

*Example* `ParentTemplate.html` parent Polymer template.

[source,html]
----
<link rel="import" href="/bower_components/polymer/polymer-element.html">
<link rel="import" href="/com/example/ChildTemplate.html">

<dom-module id="parent-template">
    <template>
        <div>Parent Template</div>
        <div>[[name]]</div>
        <child-template>
    </template>
    <script>
        class ParentTemplate extends Polymer.Element {
            static get is() { return 'parent-template' }
        }
        customElements.define(ParentTemplate.is, ParentTemplate);
    </script>
</dom-module>
----
* The Polymer template has a `<child-template>` element that is a custom element defined in `ChildTemplate.html` (see below), and imported into this template. 

*Example*: `ParentTemplate.java` server class.

[source,java]
----
@Tag("parent-template")
@HtmlImport("/com/example/ParentTemplate.html")
@Uses(ChildTemplate.class)
public class ParentTemplate extends PolymerTemplate<Model> {
}

public interface Model extends TemplateModel {
    void setName(String name);

    String getName();
}
----
* The `@Uses` annotation defines  that `ChildTemplate` is instantiated for any template element with a matching `child-template` tag name.
* The `ChildTemplate` instance is created automatically and hooked into the `<child-template>` element in the parent template, based on the `"child-template"` attribute in the `@Tag` annotation.
* Because the client-side implementation of `child-template` depends on a click handler defined from server-side Java (see `ChildTemplate.java` below), an instance of `ChildTemplate` must be created on the server.

*Example*: `ChildTemplate.html` Polymer template.

[source,html]
----
<link rel="import" href="/bower_components/polymer/polymer-element.html">

<dom-module id="child-template">
    <template>
        <button on-click="handleClick">Child Template</button>
    </template>
    <script>
        class ChildTemplate extends Polymer.Element {
            static get is() { return 'child-template' }
        }
        customElements.define(ChildTemplate.is, ChildTemplate);
    </script>
</dom-module>
----

* This template delegates a click handler to the server side.
* The `handleClick` method is called on the `ChildTemplate` instance (not the `ParentTemplate` instance).

*Example*: `ChildTemplate.java` server class.

[source,java]
----
@Tag("child-template")
@HtmlImport("/com/example/ChildTemplate.html")
public  class ChildTemplate extends PolymerTemplate<TemplateModel> {

    @EventHandler
    private void handleClick() {
        System.out.println("Click on Button in the child template");
    }
}
----

[NOTE]
You can detect whether a component is part of a template using the `isTemplateMapped` method. See <<tutorial-component-integration#,Checking for Component Mappings in Polymer Templates>> for more.
